% ANALYZE Apply local spectral analysis
%
% This method performs local spectra analysis on a STFT object.  Analysis
% parameters are defined by the FFToptions and Duration properties of the
% source object.
%    result=analyze(object);
% The output "result" is an Image object containing spectra from the
% partitions of the source object
%
% Results generated by this method can be passed to a local function,
% specified as a function handle.
%    result=analyze(object,@myfunc);
% The post-processing function must accept two inputs: the local Fourier
% transform and the local signal (both Signal objects).  The following
% example illustrates the use of these inputs in a local function that
% determines the location and strength of the largest spectrum value.
%     function out=myfunc(spectrum,local)
%        [value,index]=max(spectrum.Data);
%        location=spectrum.Grid(index);
%        out=[location; value];
%     end
%    result=analyze(object,@myfunc);
% The outputs of this function are collected into a SignalGroup object
% returned in "result".
%
% Local analysis is performed serially by default.  Parallel calculations
% can be requested:
%    result=analyze(object,target,'parallel');
% when a pool of MATLAB workers is available.
%
% See also SMASH.SignalAnalysis.STFT, partition, SMASH.ImageAnalysis.Image,
% SMASH.SignalAnalysis.SignalGroup
%

%
% created November 12, 2014 by Daniel Dolan (Sandia National Laboratories)
% revised February 16, 2015 by Daniel Dolan 
%   -incorporating PDV class capabilties
% revised July 1, 2016 by Daniel Dolan
%   -now passing Signal objects to the local function
%
function [result,frequency]=analyze(object,targetfunc,varargin)

% manage input
if (nargin<2)
    targetfunc=[];    
end

% detect down sampling 
junk=SMASH.SignalAnalysis.Signal([],zeros(object.Partition.Points,1));
[~,~,FFToption,downsample]=fft(junk,object.FFToptions);
if downsample
    warning('SMASH:STFT',...
        'Down sampling saves memory but may be slow');
end

% perform analysis
frequency=[];
spectrum=SMASH.SignalAnalysis.Signal([],nan(1,2));
spectrum.GridLabel='Frequency';
switch FFToption.SpectrumType
    case 'power'
        spectrum.DataLabel='Power';
    case 'complex'
        spectrum.DataLabel='Amplitude';
end
    function output=analyzeBlock(local)
        [frequency,output]=fft(local,FFToption);
        spectrum=reset(spectrum,frequency,output);
        if ~isempty(targetfunc)
            output=targetfunc(spectrum,local);
        end
    end

result=analyze@SMASH.SignalAnalysis.ShortTime(object,@analyzeBlock,...
    varargin{:});
frequency=reshape(frequency,[1 numel(frequency)]);

if isempty(targetfunc)
    result=SMASH.ImageAnalysis.Image(...
        result.Grid,frequency,transpose(result.Data));
    result.GraphicOptions.YDir='normal';
    result.Grid1Label='Time';
    result.Grid2Label='Frequency';
    switch object.Normalization
        case 'none'
            % do nothing
        case 'global'
            temp=abs(result.Data);
            %result.Data=result.Data/max(temp(:));
            result=reset(result,[],[],result.Data/max(temp(:)));            
            if strcmpi(object.FFToptions.SpectrumType,'power')
                result.DataLim=[-60 0];
                result.DataScale='dB';
            end
        case 'local'
            error('ERROR: local normalization is not complete');
        otherwise
            error('ERROR: invalid normalization requested');
    end    
else
    % use SignalGroup object as is
end

end