% CCFILTER Filter based on size of connected components 
%
% This method filters an image based on the size (ie number of pixels) of
% connected components. The values of pixels not part of a sufficiently 
% large connected component region are set to the minimum value of 
% object.Data. This method mimics bwareaopen from the image processing 
% toolbox, with the exception that the user has the option to directly 
% input a connected component structure generated by ccFind to save 
% computational time when trying different filter sizes. This method treats 
% the minimum value of object.Data as 0 and all other values as 1 when 
% determining connectivity. It probably makes sense to use only if 
% object.Data is binary or if a signficant fraction of object.Data is equal 
% to the minimum value (as is the case after applying removeBackground).
%
% bwareaopen info: 
% https://www.mathworks.com/help/images/ref/bwareaopen.html
%
% Usage:
%   >> [object, cc] = ccFilter(object, P)
%     -> only keep pixels in image belonging to connected regions with size
%        of at least P pixels
%     -> connected regions are determined with default ccFind connectivity
%   >> [object, cc] = ccFilter(object, p, conn)
%     -> optionally specify the connectivity (4 or 8)
%   >> [object, cc] = ccFilter(object, p, cc)
%     -> optionally specify the connected component structure from ccFind
% 
%
% See also IMAGE CCFIND REMOVEBACKGROUND

% created October, 2022 by Nathan Brown (Sandia National Laboratories)
% 

function [obj, cc]=ccFilter(obj, P, varargin)

% handle input

switch nargin
    case 2
        cc = ccFind(obj);
    case 3
        if isstruct(varargin{1}) && isfield(varargin{1}, ...
                'PixelIdxList') && isfield(varargin{1}, 'NumPixels') && ...
                isfield(varargin{1}, 'ImageSize') && ...
                isequal(varargin{1}.ImageSize, size(obj.Data))
            cc = varargin{1};
        elseif isnumeric(varargin{1})
            cc = ccFind(obj, varargin{1});
        else
            warning('Unrecognized input - implementing default behavior')
            cc = ccFind(obj);
        end
end

% filter based on connected component size

ccInd = cc.NumPixels >= P;
keep = cc.PixelIdxList(ccInd);
ind = true(cc.ImageSize);
ind(vertcat(keep{:})) = false;
obj.Data(ind) = min(min(obj.Data));
obj = updateHistory(obj);

% output filtered connected component list

cc.NumObjects = nnz(ccInd);
cc.PixelIdxList = keep;
cc.NumPixels = cc.NumPixels(ccInd);


end