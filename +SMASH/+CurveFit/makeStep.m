% makeStep Generate a step function handle by name.
%
% This function generates function handles for a named step function.
%     >> G=makeStep(name);
% Valid names are 'atan', 'erf', 'logistic', 'square', and 'tanh' (case
% insenstive).
%
% The handles generated by this function accept two inputs, i.e. G=G(p,x).
% The first input is a parameter array, the second input is an array of
% locations where the function is evaluated.  The parameter array size and
% interpretation depends on the step name.
%     Atan steps require two parameters: [x0 Lx]
%     Erf steps require two parameters: [x0 Lx]
%     Logistic steps require two parameters: [x0 Lx]
%     Square steps require one parameter: [x0]
%     Tanh steps require two parameters: [x0 Lx]
% Parameters must be passed each time the function handle is used.
%     >> G=makeStep('tanh');
%     >> x=linspace(-5,5,1000);
%     >> plot(x,G([0 1],x); % x0=0, Lx=1
%     >> plot(x,G([1 2],x); % x0=1, Lx=2
% The position parameter (x0) can take on any value, but width parameter
% (Lx) must always be greater than zero.
%
% By default, error checking (number of inputs, number of parameters, etc.)
% is performed every time the peak function handle is called.  Error checks
% can be bypassed to speed up repetitive function calls.
%     >> G=makeStep(name,'bypass');
%
% See also CurveFit, makeBackground,makePeak
%

%
% created December 2, 2014 by Daniel Dolan (Sandia National Laboratories)
%
function out=makeStep(name,errtest)

% handle input
if (nargin<1) || isempty(name)
    name='tanh';
end
assert(ischar(name),'ERROR: invalid peak name');

if nargin<2
    errtest='';
end
if strcmpi(errtest,'bypass')
    errtest=false;
else
    errtest=true;
end

% process request
switch lower(name)
    case {'atan','arctan'}
        out=@atan_function;
    case {'erf','error'}
        out=@error_function;
    case 'logistic'
        out=@logistic_function;
    case 'square'
        out=@square_function;
    case 'tanh'
        out=@tanh_function;
    otherwise
        error('ERROR: invalid step name');
end

%%
    function y=atan_function(param,x)
        if errtest
            assert(nargin==2,'ERROR: invalid number of inputs');
            assert(numel(param)==2,'ERROR: invalid number of parameters');
            assert(param(2)>0,'ERROR: invalid width parameter');
        end
        x0=param(1);
        Lx=param(2);
        y=atan((x-x0)/Lx);
        y=y/pi+1/2;
    end
%%
    function y=error_function(param,x)
        if errtest
            assert(nargin==2,'ERROR: invalid number of inputs');
            assert(numel(param)==2,'ERROR: invalid number of parameters');
            assert(param(2)>0,'ERROR: invalid width parameter');
        end
        x0=param(1);
        Lx=param(2);
        y=erf((x-x0)/Lx);
        y=(y+1)/2;
    end
%%
    function y=logistic_function(param,x)
        if errtest
            assert(nargin==2,'ERROR: invalid number of inputs');
            assert(numel(param)==2,'ERROR: invalid number of parameters');
            assert(param(2)>0,'ERROR: invalid width parameter');
        end
        x0=param(1);
        Lx=param(2);
        y=1./(1+exp(-(x-x0)/Lx));  
    end
%%
    function y=square_function(param,x)
        if errtest
            assert(nargin==2,'ERROR: invalid number of inputs');
            assert(numel(param)==1,'ERROR: invalid number of parameters');
        end
        x0=param(1);
        y=zeros(size(x));
        y(x>=x0)=1;
    end
%%
    function y=tanh_function(param,x)
        if errtest
            assert(nargin==2,'ERROR: invalid number of inputs');
            assert(numel(param)==2,'ERROR: invalid number of parameters');
            assert(param(2)>0,'ERROR: invalid width parameter');
        end
        x0=param(1);
        Lx=param(2);
        y=tanh((x-x0)/Lx);
        y=(y+1)/2;
    end
end