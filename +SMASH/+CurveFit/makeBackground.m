% makeBackground Generate a background function handle by name.
%
% This function generates function handles for a named background function.
%     >> G=makeBackground(name);
% Valid names are 'constant' and 'polynomial' (case insenstive).
%
% The handles generated by this function accept two inputs, i.e. G=G(p,x).
% The first input is a parameter array, the second input is an array of
% locations where the function is evaluated.  The parameter array size and
% interpretation depends on the background name.
%     Constant backgrounds accept zero parameters: []
%     Polynomial backgrounds accept one or more parameters: [...]
% Parameters must be passed each time the function handle is used.
%     >> G=makeBackground('polynomial');
%     >> x=linspace(-5,5,1000);
%     >> plot(x,G([1 0],x); % linear variation from 0 to 1
%     >> plot(x,G([2 0],x); % linear variation from 0 to 2
%
% Polynomial backgrounds are based on a set of normalized scale factors in
% descending order.  Evaluation over the range x1 <= x <=x2 is converted to
% normalzied coordinates u = (x-x1)/(x2-x1).
%     [1 0]   -> G(x)=1*u+0
%     [1 0 0] -> G(x)=1*u.^2+0*u+0
%     ...and so forth.
%
% By default, error checking (number of inputs, number of parameters, etc.)
% is performed every time the peak function handle is called.  Error checks
% can be bypassed to speed up repetitive function calls.
%     >> G=makeStep(name,'bypass');
%
% See also CurveFit, makePeak, makeStep

%
% created December 2, 2014 by Daniel Dolan (Sandia National Laboratories)
%
function out=makeBackground(name,errtest)

% handle input
if (nargin<1) || isempty(name)
    name='tanh';
end
assert(ischar(name),'ERROR: invalid peak name');

if nargin<2
    errtest='';
end
if strcmpi(errtest,'bypass')
    errtest=false;
else
    errtest=true;
end

% process request
switch lower(name)
    case {'constant','flat','uniform'}
        out=@constant_function;
    case 'polynomial'
        out=@polynomial_function;
    otherwise
        error('ERROR: invalid background name');
end

%%
    function y=constant_function(param,x)
        if errtest
            assert(nargin==2,'ERROR: invalid number of inputs');
            assert(numel(param)==0,'ERROR: invalid number of parameters');
        end
        y=ones(size(x));
    end
%%
    function y=polynomial_function(param,x)
        if errtest
            assert(nargin==2,'ERROR: invalid number of inputs');
            assert(numel(param)>=1,'ERROR: invalid number of parameters');
        end
        x1=min(x);
        x2=max(x);
        if x2>x1
            Lx=x2-x1;
        else
            Lx=1;
        end
        u=(x-x1)/Lx;
        y=polyval(param,u);
    end
end